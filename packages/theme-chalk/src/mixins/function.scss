@use 'config';
@use 'sass:meta';

/// ## 将选择器转化为字符串，并截取指定位置的字符
/// @param {String} $selector - 选择器
/// @return {*} -
@function selectorToString($selector) {
  $selector: inspect($selector);
  $selector: str-slice($selector, 2, -2);
  @return $selector;
}

/// ## 判断父级选择器是否包含 '--'
/// @param {type} $selector - 选择器
/// @return {type} -
@function containsModifier($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, ',' + config.$state-prefix) {
    @return true;
  } @else {
    @return false;
  }
}

/// ## 判断腹肌选择是是否包含 '.is-'
/// @param {type} $selector -
/// @return {type} -
@function containWhenFlag($selector) {
  $selector: selectorToString($selector);

  @if str-index($string: $selector, $substring: '.' + config.$state-prefix) {
    @return true;
  } @else {
    @return false;
  }
}

/// ## 判断父级是否包含 ':' (用于判断伪类和伪元素)
/// @param {type} $selector -
/// @return {type} -
@function containPseudoClass($selector) {
  $selector: selectorToString($selector);

  @if str-index($string: $selector, $substring: ':') {
    @return true;
  } @else {
    @return false;
  }
}

/// ## 判断腹肌选择器是否包含 Modifier、表示状态的 .is- 和 伪类的了
/// @param {type} $selector -
/// @return {type} -
@function hitAllSpecialNestRule($selector) {
  @return containsModifier($selector) or containWhenFlag($selector) or
    containPseudoClass($selector);
}

/// ## 合成变量名
/// @param {List} $list - 列表
/// @return {type} - 处理之后的name: --el-button-text-color
@function joinVarName($list) {
  $name: '--' + config.$namespace;
  @each $item in $list {
    @if $item != '' {
      $name: $name + '-' + $item;
    }
  }
  @return $name;
}

///
/// @param $args 'button', 'text-color'
/// @output --el-button-text-color
@function getCssVarName($args...) {
  @return joinVarName($args);
}

/// ## 获取的全局的 CSS 变量
/// @param {type} $args... - 'button', 'text-color'
/// @return {type} -  var(--el-button-text-color)
/// 将来生成新的 CSS 变量的值就是继承于全局的 CSS 变量。
@function getCssVar($args...) {
  @return var(#{joinVarName($args)});
}
