// @forward 'config';
// @forward 'function';
@use 'config' as *;
@use 'function' as *;

/// ## 定义block
/// @param {type} $block - 块
/// @output - $namespace + '-' + $block-
@mixin b($block) {
  $B: $namespace + '-' + $block !global;

  // #{$B} 类似于js中的模板字符串
  .#{$B} {
    // 内容块，只能在mixin中使用，当 @include b(icon){ style }，style就是内容块
    @content;
  }
}

/// ## 定义element
/// @param {type} $element - 元素
/// @output -
@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{$currentSelector +
      '.' +
      $B +
      $element-separator +
      $unit +
      ','};
  }

  @if hitAllSpecialNestRule($selector) {
    // @at-root 限定输出在文档的根层级上，而不是被嵌套在其父选择器下
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

/// ## 定义修改器
/// @param {type} $modifier -
/// @output -
@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector +
      $selector +
      $modifier-separator +
      $unit +
      ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

/// ## 定义动作状态
/// @param {type} $state -
/// @output -
@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}
